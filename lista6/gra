import pygame
import random

# Inicjalizacja Pygame
pygame.init()

# Konfiguracja ekranu
WIDTH = 800
HEIGHT = 600
FPS = 60

# Kolory
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
BLUE=(0,0,255)

game_over_sound = pygame.mixer.Sound("end.mp3")
missile_sound=pygame.mixer.Sound('shot.mp3')
menu_sound=pygame.mixer.Sound('menu.mp3')
# Inicjalizacja ekranu
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Klon gry Space Invaders")
clock = pygame.time.Clock()

# Klasa gracza
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("player.png")
        self.rect = self.image.get_rect()
        self.rect.centerx = WIDTH // 2
        self.rect.bottom = HEIGHT - 10
        self.speed_x = 0
        self.lives = 3
        self.score = 0

    def update(self):
        self.speed_x = 0
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_LEFT]:
            self.speed_x = -5
        if keystate[pygame.K_RIGHT]:
            self.speed_x = 5
        self.rect.x += self.speed_x
        if self.rect.right > WIDTH:
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0

    def shoot(self):
        bullet = Bullet(self.rect.centerx, self.rect.top)
        all_sprites.add(bullet)
        bullets.add(bullet)


# Klasa wroga
class Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load("enemy.png")
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.speed_x = 2
        self.shoot_delay = random.randint(1000, 3000)  # Opóźnienie między strzałami wroga
        self.last_shot_time = pygame.time.get_ticks()

    def update(self):
        self.rect.x += self.speed_x
        if self.rect.right > WIDTH or self.rect.left < 0:
            self.speed_x *= -1
            self.rect.y += abs(self.speed_x) * 10

        # Strzały wrogów
        current_time = pygame.time.get_ticks()
        if current_time - self.last_shot_time > self.shoot_delay:
            enemy_bullet = EnemyBullet(self.rect.centerx, self.rect.bottom)
            all_sprites.add(enemy_bullet)
            enemy_bullets.add(enemy_bullet)
            self.last_shot_time = current_time
            self.shoot_delay = random.randint(3000, 5000)  # Losowe opóźnienie kolejnego strzału

class Better_Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load("enemy.png")
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.speed_x = 4
        self.shoot_delay = random.randint(1000, 2000)  # Opóźnienie między strzałami wroga
        self.last_shot_time = pygame.time.get_ticks()

    def update(self):
        self.rect.x += self.speed_x
        if self.rect.right > WIDTH or self.rect.left < 0:
            self.speed_x *= -1
            self.rect.y += abs(self.speed_x) * 10

        # Strzały wrogów
        current_time = pygame.time.get_ticks()
        if current_time - self.last_shot_time > self.shoot_delay:
            enemy_bullet = EnemyBullet(self.rect.centerx, self.rect.bottom)
            all_sprites.add(enemy_bullet)
            enemy_bullets.add(enemy_bullet)
            self.last_shot_time = current_time
            self.shoot_delay = random.randint(3000, 5000)
# Klasa pocisku gracza
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load("missile.png")
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speed_y = -10

    def update(self):
        self.rect.y += self.speed_y
        if self.rect.bottom < 0:
            self.kill()

# Klasa pocisku wroga
class EnemyBullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load("enemy_missile.png")
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.speed_y = 5

    def update(self):
        self.rect.y += self.speed_y
        if self.rect.top > HEIGHT:
            self.kill()

# Grupa wszystkich spritów
all_sprites = pygame.sprite.Group()
enemies = pygame.sprite.Group()
bullets = pygame.sprite.Group()
enemy_bullets = pygame.sprite.Group()
player = Player()
all_sprites.add(player)

# Tworzenie wrogów
def create_enemies():
    for row in range(5):
        for col in range(10):
            enemy = Enemy(100 + col * 50, 50 + row * 40)
            all_sprites.add(enemy)
            enemies.add(enemy)

def create_better_enemies():
    for row in range(5):
        for col in range(10):
            enemy = Better_Enemy(100 + col * 50, 50 + row * 40)
            all_sprites.add(enemy)
            enemies.add(enemy)

# Funkcja wyświetlająca menu
def show_menu():
    menu_font = pygame.font.Font(None, 36)
    title_font = pygame.font.Font(None, 48)
    title_text = title_font.render("Klon gry Space Invaders", True, WHITE)
    screen.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, 100))

    start_text = menu_font.render("1. Start gry", True, WHITE)
    screen.blit(start_text, (WIDTH // 2 - start_text.get_width() // 2, 250))

    rules_text = menu_font.render("2. Zasady gry", True, WHITE)
    screen.blit(rules_text, (WIDTH // 2 - rules_text.get_width() // 2, 300))

    config_text = menu_font.render("3. Konfiguracja", True, WHITE)
    screen.blit(config_text, (WIDTH // 2 - config_text.get_width() // 2, 350))

    scores_text = menu_font.render("4. Najlepsze wyniki", True, WHITE)
    screen.blit(scores_text, (WIDTH // 2 - scores_text.get_width() // 2, 400))

    author_text = menu_font.render("5. O autorze", True, WHITE)
    screen.blit(author_text, (WIDTH // 2 - author_text.get_width() // 2, 450))
    screen.blit(author_text, (WIDTH // 2 - author_text.get_width() // 2, 450))
    end_text = menu_font.render("6. Koniec gry", True, WHITE)
    screen.blit(end_text, (WIDTH // 2 - end_text.get_width() // 2, 500))
    screen.blit(end_text, (WIDTH // 2 - end_text.get_width() // 2, 500))
    pygame.display.update()

def save_high_score(score):
    with open("high_scores.txt", "a") as file:
        file.write(str(score) + "\n")

def load_high_scores():
    high_scores = []
    with open("high_scores.txt", "r") as file:
        for line in file:
            score = int(line.strip())
            high_scores.append(score)
    return high_scores

show_menu()
menu_sound.play()
start_game = False
game_over = False

running = True
while running:
    clock.tick(FPS)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if not start_game and not game_over:  
                if event.key == pygame.K_1:
                    start_game = True
                    all_sprites.empty()
                    enemies.empty()
                    bullets.empty()
                    enemy_bullets.empty()
                    player = Player()
                    all_sprites.add(player)
                    create_enemies()
                elif event.key == pygame.K_2:
                    screen.fill(BLACK)
                    text = pygame.font.Font(None, 20).render("1-START  2-ZASADY  3-KONFIGURACJA  4-HIGH SCORES  5-INFO  6-WYJDŹ", True, WHITE)
                    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT *9/10))
                    rules_text = pygame.font.Font(None, 36).render("Poruszaj się w lewo i prawo strzałkami", True, WHITE)
                    rules_text2 = pygame.font.Font(None, 36).render("Strzelaj klikając spację", True, WHITE)
                    rules_text3 = pygame.font.Font(None, 36).render("Unikaj pocisków i niszcz wrogów, tak długo jak potrafisz", True, WHITE)
                    screen.blit(rules_text, (WIDTH // 2 - rules_text.get_width() // 2, HEIGHT *4/10))
                    screen.blit(rules_text2, (WIDTH // 2 - rules_text2.get_width() // 2, HEIGHT *5/10))
                    screen.blit(rules_text3, (WIDTH // 2 - rules_text3.get_width() // 2, HEIGHT *6/10))    
                    pygame.display.update()          
                elif event.key == pygame.K_3:
                    screen.fill(BLACK)
                    text = pygame.font.Font(None, 20).render("1-START  2-ZASADY  3-KONFIGURACJA  4-HIGH SCORES  5-INFO  6-WYJDŹ", True, WHITE)
                    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT *9/10))
                    config_text = pygame.font.Font(None, 36).render("Gra zbyt prosta, żeby ją konfigurować :)", True, WHITE)
                    screen.blit(config_text, (WIDTH // 2 - config_text.get_width() // 2, HEIGHT *1/2))
                    pygame.display.update()
                elif event.key == pygame.K_4:
                    screen.fill(BLACK)
                    text = pygame.font.Font(None, 20).render("1-START  2-ZASADY  3-KONFIGURACJA  4-HIGH SCORES  5-INFO  6-WYJDŹ", True, WHITE)
                    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT *9/10))
                    high_scores = load_high_scores()
                    high_scores = sorted(high_scores, reverse=True)[:5]
                    hs_text=pygame.font.Font(None, 36).render("Najlepsze wyniki:", True, WHITE)
                    screen.blit(hs_text, (WIDTH // 2 - hs_text.get_width() // 2, HEIGHT *1/8))
                    for i, score in enumerate(high_scores):
                         hs_text2=pygame.font.Font(None, 36).render(f"{i + 1}- {score}", True, WHITE)
                         screen.blit(hs_text2, (WIDTH // 2 - hs_text2.get_width() // 2, HEIGHT *((i+2)/8)))
                    pygame.display.flip()
                elif event.key == pygame.K_5:
                    screen.fill(BLACK)
                    text = pygame.font.Font(None, 20).render("1-START  2-ZASADY  3-KONFIGURACJA  4-HIGH SCORES  5-INFO  6-WYJDŹ", True, WHITE)
                    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT *9/10))
                    author_text = pygame.font.Font(None, 36).render("Autor: Jakub Ciągło", True, WHITE)
                    author_text2 = pygame.font.Font(None, 36).render("Politechnika Wrocławska", True, WHITE)
                    screen.blit(author_text, (WIDTH // 2 - author_text.get_width() // 2, HEIGHT *1/4))
                    screen.blit(author_text2, (WIDTH // 2 - author_text2.get_width() // 2, HEIGHT *2/4))
                    pygame.display.flip()
                elif event.key ==pygame.K_6:
                    running=False       
            elif start_game:
                menu_sound.stop()  
                if event.key == pygame.K_SPACE:
                    player.shoot()
                    missile_sound.play()
    if game_over==True:
        game_over_sound.play()
        menu_sound.play()
        game_over_font = pygame.font.Font(None, 48)
        score_font = pygame.font.Font(None, 36)
        screen.fill(BLACK)
        game_over_text = game_over_font.render("Koniec gry!     Twój wynik: " + str(player.score), True, BLUE)
        screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, 200))
        save_high_score(player.score)
        pygame.display.flip()
        game_over=False
        show_menu()
    
    if start_game and not game_over:
        # Aktualizacja
        all_sprites.update()

        # Sprawdzanie kolizji pocisków gracza z wrogami
        bullet_hits = pygame.sprite.groupcollide(bullets, enemies, True, True)
        for enemy in bullet_hits.values():
            player.score += len(enemy)

        # Sprawdzanie kolizji pocisków wroga z graczem
        enemy_bullet_hits = pygame.sprite.spritecollide(player, enemy_bullets, True)
        if enemy_bullet_hits:
            player.lives -= 1
            if player.lives <= 0:
                game_over = True  # Zakończenie gry po utracie wszystkich żyć
                start_game=False

        # Sprawdzanie kolizji gracza z wrogami
        player_hits = pygame.sprite.spritecollide(player, enemies, False)
        if player_hits:
            player.lives -= 1
            if player.lives <= 0:
                game_over = True  # Zakończenie gry po utracie wszystkich żyć

        # Jeśli wszyscy wrogowie zostali zniszczeni, tworzymy nowych
        if len(enemies) == 0:
            create_better_enemies()

        # Rysowanie
        screen.fill(BLACK)
        all_sprites.draw(screen)

        # Wyświetlanie wyniku
        font = pygame.font.Font(None, 36)
        score_text = font.render("Score: " + str(player.score), True, WHITE)
        screen.blit(score_text, (10, 10))

        # Wyświetlanie liczby żyć
        lives_text = font.render("Lives: " + str(player.lives), True, WHITE)
        screen.blit(lives_text, (WIDTH - lives_text.get_width() - 10, 10))

        pygame.display.flip()

pygame.quit()
