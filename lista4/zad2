import argparse
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt


def seir_model(t, y, N, beta, sigma, gamma):
    S, E, I, R = y
    dSdt = -beta * S * I / N
    dEdt = beta * S * I / N - sigma * E
    dIdt = sigma * E - gamma * I
    dRdt = gamma * I
    return dSdt, dEdt, dIdt, dRdt

def main(args):
    '''Funkcja wykorzystująca argumenty wpisane w lini komend, do użycia w modelu SEIR
    
    Argumenty:
    -N: liczba ludności całkowitej
    -S0: liczba ludzi podatnych na zakażenie na początku
    -I0: liczba ludzi zakażonych, ale jeszcze niezarażających innych na początku
    -R0: liczba ludzi, którzy wyzdrowieli i nie mogą już zarazić się ani zarażać innych na początku
    -beta: współczynnik transmisji (liczba kontaktów na jednostkę czasu)
    -sigma: współczynnik zapadalności (średni czas, przez jaki osoba zakażona, ale jeszcze niezarażająca innych, pozostaje zakażona)
    -gamma: współczynnik wyzdrowienia (średni czas, przez jaki zakażona osoba jest zaraźliwa)
    
    '''
    if args.N is not None and args.S0 is not None and args.E0 is not None:
        if args.N != (args.S0 + args.E0 + args.I0 + args.R0):
            raise ValueError('Dane nie są zgodne!')
    elif args.N is not None and args.S0 is None and args.E0 is None:
        args.E0 = 1
        args.S0 = args.N - args.E0 - args.I0 - args.R0
    elif args.N is not None and args.S0 is not None and args.E0 is None:
        args.E0 = args.N - args.S0 - args.I0 - args.R0
    elif args.N is not None and args.S0 is None and args.E0 is not None:
        args.S0 = args.N - args.E0 - args.I0 - args.R0
    elif args.N is None and args.S0 is not None and args.E0 is not None:
        args.N = (args.S0 + args.E0 + args.I0 + args.R0)
    elif args.N is None and args.S0 is None and args.E0 is not None:
        args.N=1000
        args.S0 = args.N - args.E0 - args.I0 - args.R0
    elif args.N is None and args.S0 is not None and args.E0 is None:
        args.N=1000
        args.E0 = args.N - args.S0 - args.I0 - args.R0
    elif args.N is None and args.S0 is None and args.E0 is None:
        args.N=1000
        args.E0 = 1
        args.S0 = args.N - args.E0 - args.I0 - args.R0
    y0 = args.S0, args.E0, args.I0, args.R0

    t_start = 0
    t_end = 200
    t_step = 0.1
    t_span = np.arange(t_start, t_end, t_step)

    solution = solve_ivp(seir_model, (t_start, t_end), y0, args=(args.N, args.beta, args.sigma, args.gamma), t_eval=t_span)

    fig, ax = plt.subplots(figsize=(10, 6))
    plt.plot(solution.t, solution.y[0], 'b', label='Podatni na zakażenie')
    plt.plot(solution.t, solution.y[1], 'y', label='Zakażeni, ale jeszcze niezarażający innych')
    plt.plot(solution.t, solution.y[2], 'r', label='Zakażeni i zarażający innych')
    plt.plot(solution.t, solution.y[3], 'g', label='Wyzdrowiali')
    plt.xlabel('Czas')
    plt.ylabel('Liczba ludzi')
    plt.title('Model SEIR1')
    ax.set_ylim([0, args.N])
    ax.legend()
    plt.show()

parser = argparse.ArgumentParser(description='Model SEIR1')
parser.add_argument('-N', type=float, default=1000, help='liczba ludności całkowitej')
parser.add_argument('-S0', type=float, default=None, help='liczba ludzi podatnych na zakażenie na początku')
parser.add_argument('-E0', type=float, default=0, help='liczba ludzi zakażonych, ale jeszcze niezarażających innych na początku')
parser.add_argument('-I0', type=float, default=1, help='liczba ludzi zarażonych i zarażających innych na początku')
parser.add_argument('-R0', type=float, default=0, help='liczba ludzi, którzy wyzdrowieli i nie mogą już zarazić się ani zarażać innych na początku')
parser.add_argument('-beta', type=float, default=1.34, help='współczynnik transmisji (liczba kontaktów na jednostkę czasu)')
parser.add_argument('-sigma', type=float, default=0.25, help='współczynnik zapadalności (średni czas, przez jaki osoba zakażona, ale jeszcze niezarażająca innych, pozostaje zakażona)')
parser.add_argument('-gamma', type=float, default=0.05, help='współczynnik wyzdrowienia (średni czas, przez jaki zakażona osoba jest zaraźliwa)')
args = parser.parse_args()
main(args)
